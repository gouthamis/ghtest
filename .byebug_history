exit
client_id = PackageTestReport.where(id: request.env["HTTP_REFERER"].split(".").last)
request.env["HTTP_REFERER"]
params
c
PackageTestReport.find_by_client_name params[:package_pack_type]
params
PackageTestReport.all
PackageTestReport.count
client_id = PackageTestReport.find_by_client_name params[:client_name]
c
client_id.id
client_id
client_id = PackageTestReport.find_by_client_name params[:client_name]
c
request.url
request.public_methods
request.uri
request.host
request.uri
request.url
request
c
params
c
params
c
(PackageTestReport.find params[:format]).client_name
(PackageTestReport.find params[:format]).name
client_name(params[:format])
params[:format]
c
params
c
request.url
request.host
request
c
package_params[:title]
package_params
params
PackageDescription.find_by_package_name
PackageDescription.last
PackageDescription
PackageDecription
Package.last
images["0"]["photo"]
images["0"]
images
image
exit
package_params
package_params.delete(:images_attributes)
package_params
images =  package_params[:images_attributes]
c
params
@package.save
@package = Package.new(package_params)
package_params.delete(:images_attributes)
package_params.destroy(:images_attributes)
package_params[:images_attributes]
package_params
params
c
params
c
params
c
params
c
package_params
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
package
c
params
c
@package.fields.count
@package.fields
@package.field
@package.save
@package = Package.new(package_params)
package_params
params
c
params
c
 params["package_description_id"]
params
c
params
c
params
link_to 'add tables', new_package_path, :params["package_description_id"] => @package_description.id
@package_description.id
@package_description
params
c
params
c
params
c
params
managed_params
c
respond_to
@package_description
c
params
c
params
c
params
c
params
c
params
c
params
c
params[:id]
params
c
managed_params
params
c
PackageDescription.last
PackageDescription.new(:package_number => p_array).save
PackageDescription.last
PackageDescription
p_array
c
params.map {| x | t =t+1; p_array.push(params["p#{t}"])}
params.map {| x | t =t+1; p_array << (params["p#{t}"])}
params.map {| x | t =t+1; p_array << (params["p#{t}"])
params.map {| x | t =t+1; p_array << (params["p#{t}"])}
params.map {| x | t =t+1; p_array << (params["p#{t}"]) }
params["p#{t}"]
params
t
params
params.map {| x | t =t+1; p_array << params["p#{t}"] }
params["p#{1}"]
params["p#{t}"]
params
p
t
params.map {| x | t =t+1; p_array << params["p#{t}"] }
t= 0
t
params
params.map {| x | t =t+1; p_array << params["p#{t}"] }
params["p1"]
params
params.map {| x | t =t+1; p_array << "#{params}p#{t}" }
p_array = []
p_array.uniq
p_array.count
p_array
c
params["p6"]
params
package_description_params
exit
params
